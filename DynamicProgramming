# ----------
# User Instructions:
# 
# Create a function compute_value which returns
# a grid of values. The value of a cell is the minimum
# number of moves required to get from the cell to the goal. 
#
# If a cell is a wall or it is impossible to reach the goal from a cell,
# assign that cell a value of 99.
# ----------

grid = [[0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0]]
goal = [len(grid)-1, len(grid[0])-1]
cost = 1 # the cost associated with moving from a cell to an adjacent one

delta = [[-1, 0 ], # go up
         [ 0, -1], # go left
         [ 1, 0 ], # go down
         [ 0, 1 ]] # go right

delta_name = ['^', '<', 'v', '>']

def compute_value(grid,goal,cost):
    # ----------------------------------------
    # insert code below
    # ----------------------------------------
    value = [[99 for col in range(len(grid[0]))] for row in range(len(grid))]
    closed = [[0 for col in range(len(grid[0]))] for row in range(len(grid))]

    # initialise value and closed grids
    for j in range(len(grid[0])): #col
        for i in range(len(grid)): #row
            if grid[i][j] == 1:
                value[i][j] = 99
                closed[i][j] = 1
    
    closed[goal[0]][goal[1]]=1
    open_list = []
    open_list.append([0,goal[0],goal[1]])
    
    while len(open_list)>0:
        current_cell = open_list.pop()

        candidate_values = []
        candidate_values.append(current_cell[0]-cost)
        for step in delta:
            next_cell = [current_cell[0]+cost,current_cell[1]+step[0],current_cell[2]+step[1]]
            # if boundaries ok
            if next_cell[1]>=0 and next_cell[1]<len(grid):
                if next_cell[2]>=0 and next_cell[2]<len(grid[0]):
                    if not closed[next_cell[1]][next_cell[2]]:
                        # calculate new cost
                        next_cell[0] = current_cell[0]+cost
                        #print(next_cell)
                        open_list.append(next_cell)
                        
                    else:
                        # update cell value
                        candidate_values.append(value[next_cell[1]][next_cell[2]])
                        
        #print ('candidates')
        #print (candidate_values)
        value[current_cell[1]][current_cell[2]] = min(candidate_values)+cost
        #closed[next_cell[1]][next_cell[2]]=1;
        closed[current_cell[1]][current_cell[2]]=1;
    
        
    # make sure your function returns a grid of values as 
    # demonstrated in the previous video.
    #print ('closed')
    #for a_row in closed:
    #    print (a_row)
    return value 

value = compute_value(grid,goal,cost)
#print ('value:')
for a_row in value:
    print (a_row)
